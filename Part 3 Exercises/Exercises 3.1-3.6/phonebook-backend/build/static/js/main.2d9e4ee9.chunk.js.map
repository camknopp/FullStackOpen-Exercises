{"version":3,"sources":["services/persons.js","components/DisplayFilteredItems.js","components/PersonForm.js","components/FilterBox.js","components/Notification.js","components/ErrorMessage.js","App.js","serviceWorker.js","index.js"],"names":["baseurl","axios","get","personObject","post","newObject","id","put","delete","DisplayFilteredItems","persons","setPersons","filter","n","i","length","name","toLowerCase","includes","push","map","person","key","number","onClick","window","confirm","personService","then","response","data","PersonForm","handleSubmit","nameValue","nameOnChange","numberValue","numberOnChange","onSubmit","value","onChange","type","FilterBox","filterValue","handleFilterChange","Notification","message","console","log","className","ErrorMessage","App","useState","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","setMessage","errorMessage","setErrorMessage","useEffect","event","target","preventDefault","forEach","msg","personID","findPersonID","r","setTimeout","catch","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2d9e4ee9.chunk.js","sourcesContent":["//import React from 'react'\nimport axios from \"axios\"\n\nconst baseurl = \"/api/entries\"\n\nconst getAll = () => {\n    // return all of the phonebook entries\n  return axios.get(baseurl)\n}\n\nconst create = personObject => {\n    // create new entry in phonebook\n  return axios.post(baseurl, personObject)\n}\n\nconst update = (newObject, id) => {\n    // update already existing entry at given ID with new object\n  return axios.put(`${baseurl}/${id}`, newObject)\n}\n\nconst remove = id => {\n  return axios.delete(`${baseurl}/${id}`)\n}\n\nexport default { getAll, create, update, remove }\n","import React from 'react'\nimport personService from \"../services/persons\"\n  \nconst DisplayFilteredItems = ({persons, setPersons, filter}) => {\n    // display the phonebook entries according to specified filter\n\n    let n = []\n    \n    // handler for when the 'delete' button is clicked\n    // deletes the corresponding entry in the database\n    const deleteClicked = (id, name) => {\n        if(window.confirm(`Delete ${name}?`)) {\n            personService.remove(id)\n            .then(response => {\n                personService.getAll()\n                .then(response => {\n                    setPersons(response.data)\n                })\n            })\n        } else {\n            return\n        }\n    }\n    \n    // filters out entries according to specified filter\n    for (let i = 0; i < persons.length; i++) {\n        if ((persons[i].name.toLowerCase()).includes(filter.toLowerCase())) {\n            n.push(persons[i])\n        }\n    }\n\n    // return a formatted list of <name> <number> with a delete button for each entry\n    return (\n    n.map(person => \n    <div key={person.id}>\n        {person.name} {person.number}\n        <button onClick={() => deleteClicked(person.id, person.name)}>delete</button>\n    </div>)\n    )\n}\n\nexport default DisplayFilteredItems","import React from 'react'\n\nconst PersonForm = ({handleSubmit, nameValue, nameOnChange, numberValue, numberOnChange}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                name: <input value={nameValue} onChange={nameOnChange}/>\n            </div>\n            <div>\n                number: <input value={numberValue} onChange={numberOnChange} />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n      </form>\n    )\n}\n\n\nexport default PersonForm","import React from 'react'\n\nconst FilterBox = ({filterValue, handleFilterChange}) => {\n    return (\n        <div>\n        filter shown with <input value={filterValue} onChange={handleFilterChange} />\n        </div>\n    )\n}\n\nexport default FilterBox ","import React from \"react\"\nimport './../index.css'\n\nconst Notification = ({message}) => {\n\n  if (message == null) {\n    return null\n  } \n  console.log(\"notification of \", message)\n\n  return (\n   <div className=\"notification\">{message}</div>\n  )\n}\n\nexport default Notification\n","import React from \"react\"\nimport './../index.css'\n\nconst ErrorMessage = ({message}) => {\n\n  if (message == null) {\n    return null\n  } \n  console.log(\"notification of \", message)\n\n  return (\n   <div className=\"error\">{message}</div>\n  )\n}\n\nexport default ErrorMessage\n","import React, { useState, useEffect } from \"react\"\nimport DisplayFilteredItems from \"./components/DisplayFilteredItems\"\nimport PersonForm from \"./components/PersonForm\"\nimport FilterBox from \"./components/FilterBox\"\nimport personService from \"./services/persons\"\nimport Notification from \"./components/Notification\"\nimport ErrorMessage from \"./components/ErrorMessage\"\n\nconst App = () => {\n\tconst [persons, setPersons] = useState([])\n\tconst [newName, setNewName] = useState(\"\")\n\tconst [newNumber, setNewNumber] = useState(\"\")\n\tconst [newFilter, setNewFilter] = useState(\"\")\n  const [message, setMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n\tuseEffect(() => {\n\t\tpersonService.getAll().then(response => {\n\t\t\tsetPersons(response.data)\n\t\t})\n\t}, [])\n\n\t// finds the corresponding id for a given name in the database\n\tconst findPersonID = name => {\n\t\tfor (let i = 0; i < persons.length; i++) {\n\t\t\tif (persons[i].name === name) {\n\t\t\t\treturn persons[i].id\n\t\t\t}\n\t\t}\n\t}\n\n\tconst handleNameChange = event => {\n\t\tsetNewName(event.target.value)\n\t}\n\n\tconst handleNumberChange = event => {\n\t\tsetNewNumber(event.target.value)\n\t}\n\n\tconst handleFilterChange = event => {\n\t\tsetNewFilter(event.target.value)\n\t}\n\n\tconst handleSubmit = event => {\n\t\tevent.preventDefault()\n\t\tlet n = []\n\t\tif (persons.length > 0) {\n\t\t\tpersons.forEach(person => n.push(person.name))\n\t\t}\n\n\t\tconst personObject = {\n\t\t\tname: newName,\n\t\t\tnumber: newNumber\n\t\t}\n\n\t\t// check if the name already exists in the phonebook\n\t\tif (n.includes(newName)) {\n\t\t\tlet msg = `Replace ${newName}'s old number with a new one?`\n\t\t\tif (window.confirm(msg)) {\n\t\t\t\t// update the old entry with the new number\n\t\t\t\tlet personID = findPersonID(newName)\n\t\t\t\tpersonService.update(personObject, personID).then(response => {\n\t\t\t\t\tpersonService.getAll().then(r => {\n\t\t\t\t\t\tsetMessage(`Changed ${newName}'s number`)\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tsetMessage(null)\n\t\t\t\t\t\t}, 5000)\n\t\t\t\t\t\tsetPersons(r.data)\n\t\t\t\t\t})\n        })\n        .catch(error => {\n          setErrorMessage(`Information of ${newName} has already been removed from the server`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          personService.getAll().then(response => {\n            setPersons(response.data)\n          })\n\n        })\n\t\t\t}\n\t\t} else {\n\t\t\t// name does not already exist in phonebook, so create new entry\n\t\t\tpersonService.create(personObject).then(response => {\n\t\t\t\tpersonService.getAll().then(r => {\n\t\t\t\t\tsetMessage(`Added ${newName}`)\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tsetMessage(null)\n\t\t\t\t\t}, 5000)\n\t\t\t\t\tsetPersons(r.data)\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Phonebook</h2>\n\t\t\t<Notification message={message} />\n      <ErrorMessage message={errorMessage} />\n\n\t\t\t<FilterBox\n\t\t\t\tfilterValue={newFilter}\n\t\t\t\thandleFilterChange={handleFilterChange}\n\t\t\t/>\n\n\t\t\t<h2>add a new</h2>\n\n\t\t\t<PersonForm\n\t\t\t\thandleSubmit={handleSubmit}\n\t\t\t\tnameValue={newName}\n\t\t\t\tnameOnChange={handleNameChange}\n\t\t\t\tnumberValue={newNumber}\n\t\t\t\tnumberOnChange={handleNumberChange}\n\t\t\t/>\n\n\t\t\t<h2>Numbers</h2>\n\n\t\t\t<DisplayFilteredItems\n\t\t\t\tpersons={persons}\n\t\t\t\tsetPersons={setPersons}\n\t\t\t\tfilter={newFilter}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}